#+STARTUP: overview
* Fix the interface
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)
(global-set-key (kbd "<f5>") 'revert-buffer)
#+END_SRC


* Packages for trying new things
** Try
   #+BEGIN_SRC emacs-lisp
     (use-package try
       :ensure t)
   #+END_SRC

** Which-key
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure t
       :config
       (which-key-mode)
     )
   #+END_SRC


* Tweaking buffer and window management
** ibuffer
   This puts list of open buffers in a nicely navigatable list instead
   of the standard.

   #+BEGIN_SRC emacs-lisp
     (defalias 'list-buffers 'ibuffer)
   #+END_SRC

** ace-window
   Ace-window lets one switch more efficiently between different
   windows. The same C-x o binding is used.

   #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :ensure t
       :init
       (progn
        (global-set-key [remap other-window] 'ace-window)
        (custom-set-faces '(aw-leading-char-face
           ((t (:inherit ace-jump-face-foreground :height 3.0)))))
        ))
   #+END_SRC


* Better searching and file finding
** counsel
   I don't know too much about this package yet, but it is needed for
   swiper to work like I want.

   #+BEGIN_SRC emacs-lisp
     (use-package counsel
       :ensure t
       )
   #+END_SRC

** swiper
   Improves on the standard C-s search. You get a split-window, where
   you can navigate with C-n and C-p, as well as the possibility to
   use space-characters as wildcards. With this setting, it works the
   same way when finding files.

   It seems to also be able to interact with counsel to give some
   git-functionality as well, but I haven't researched this yet.

   #+BEGIN_SRC emacs-lisp
     (use-package swiper
       :ensure t
       :bind (("C-x C-f" . counsel-find-file)
              ("C-s" . swiper)
              ("C-c C-r" . ivy-resume)
              ("M-x" . counsel-M-x)
              ("C-x C-f" . counsel-find-file)
              )
       :config
       (progn
         (ivy-mode 1)
         (setq ivy-use-virtual-buffers t)
         (setq enable-recursive-minibuffers t) ))
   #+END_SRC


* General editing
** Auto-comletion
   Later this will probably be extended, but for now, the package
   auto-complete is basically it.

*** auto-complete
    #+BEGIN_SRC emacs-lisp
      (use-package auto-complete
        :ensure t
        :init
        (progn
          (ac-config-default)
          (global-auto-complete-mode t)
          ))
    #+END_SRC


* Cosmetics
** Theme
   I'm still not fully sold on what theme to use, so the code for
   zenburn is still in here, though commented out. One can explore the
   different themes in the color-theme package through the load-theme
   M-x command.

   #+BEGIN_SRC emacs-lisp
     ;(use-package zenburn-theme 
     ;  :ensure t 
     ;  :config 
     ;  (load-theme 'zenburn t)
     ;  )

     (use-package color-theme
       :ensure t
       :config
       (load-theme 'tango)
       )
   #+END_SRC

** Org-mode bullets
   Adds the nice bullets to org mode
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hoo (lambda () (org-bullets-mode 1)))
       )
   #+END_SRC

