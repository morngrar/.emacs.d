
#+STARTUP: overview
* Fix the interface

** Removing startup message and cleaning top of window
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-screen t)
     (if (fboundp 'tool-bar-mode)
         (tool-bar-mode -1)
       )
     (if (fboundp 'menu-bar-mode)
         (menu-bar-mode -1)
       )
   #+END_SRC
** Tweaking general keybindings
   Only stuff related to the interface goes here, not tied up to
   specific modes or packages.

*** Shell integration

    Interactive shell command - may be limited
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "M-s") 'shell)
    #+END_SRC

    Spawn full bash in the buffer (no limitations):
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-M-s") 'term)
    #+END_SRC

*** 'y or n' prompts
    Don't ask for whole words, only the letter.

    #+BEGIN_SRC emacs-lisp
      (fset 'yes-or-no-p 'y-or-n-p)
    #+END_SRC

*** F5 'reload'
    Revert buffer on F5 (reloads buffer from file)

    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "<f5>") 'revert-buffer)
    #+END_SRC

** Line wrapping and highlighting
   Soft-wrapping of lines:

   #+BEGIN_SRC emacs-lisp
     (global-visual-line-mode 1)
   #+END_SRC

   Highlight current line:

   #+BEGIN_SRC emacs-lisp
     (global-hl-line-mode 1)
   #+END_SRC

   Set line-highlighting color to differ from the themes C-<space>
   color:

   #+BEGIN_SRC emacs-lisp
     (set-face-background hl-line-face "#d2dff6")
   #+END_SRC

** Vertical ruler
   Adds a marker at column 80 in programming buffers:
   #+BEGIN_SRC emacs-lisp
     (defun prog-mode-header-line ()
       "Setup the `header-line-format' on for buffers."
       (setq header-line-format
             (list " " (make-string 79 ?-) "|")))

     (add-hook 'prog-mode-hook #'prog-mode-header-line)
   #+END_SRC

   Highlight when past column 80.
   (*NOTE* For this you need to install the package 'emacs-goodies-el' from terminal)
   #+BEGIN_SRC emacs-lisp
     (setq-default fill-column 80)
     (add-hook 'prog-mode-hook 'highlight-beyond-fill-column)
     (custom-set-faces '(highlight-beyond-fill-column-face
                         ((t (:foreground "red" )))))
   #+END_SRC

** Tweaking edges
   Removing fringes:
   #+BEGIN_SRC emacs-lisp
     (set-fringe-mode '(0 . 0))
   #+END_SRC

   Removing scrollbars:
   #+BEGIN_SRC emacs-lisp
     (if (fboundp 'scroll-bar-mode)
         (scroll-bar-mode -1)
       )
   #+END_SRC

** Feedback
   Tell when end of buffer is reached:
   #+BEGIN_SRC emacs-lisp
     (setq-default indicate-empty-lines t)
   #+END_SRC

   Whitespace awareness:
   #+BEGIN_SRC emacs-lisp
     (setq whitespace-style
           '(face trailing tabs indentation::space tab-mark)
           )
     (global-whitespace-mode)
     ;(diminish 'global-whitespace-mode) ;; not exactly sure what this does..
   #+END_SRC

* Packages for trying new things
** Try
   #+BEGIN_SRC emacs-lisp
     (use-package try
       :ensure t)
   #+END_SRC

** Which-key
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure t
       :config
       (which-key-mode)
     )
   #+END_SRC

* Tweaking buffer and window management
** ibuffer
   This puts list of open buffers in a nicely navigatable list instead
   of the standard.

   #+BEGIN_SRC emacs-lisp
     (defalias 'list-buffers 'ibuffer)
   #+END_SRC

** ace-window
   Ace-window lets one switch more efficiently between different
   windows. The same C-x o binding is used.

   #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :ensure t
       :init
       (progn
        (global-set-key [remap other-window] 'ace-window)
        (custom-set-faces '(aw-leading-char-face
           ((t (:inherit ace-jump-face-foreground :height 3.0)))))
        ))
   #+END_SRC

* Better searching and file finding
** counsel
   I don't know too much about this package yet, but it is needed for
   swiper to work like I want.

   #+BEGIN_SRC emacs-lisp
     (use-package counsel
       :ensure t
       )
   #+END_SRC

** swiper
   Improves on the standard C-s search. You get a split-window, where
   you can navigate with C-n and C-p, as well as the possibility to
   use space-characters as wildcards. With this setting, it works the
   same way when finding files.

   It seems to also be able to interact with counsel to give some
   git-functionality as well, but I haven't researched this yet.

   #+BEGIN_SRC emacs-lisp
     (use-package swiper
       :ensure t
       :bind (("C-x C-f" . counsel-find-file)
              ("C-s" . swiper)
              ("C-c C-r" . ivy-resume)
              ("M-x" . counsel-M-x)
              ("C-x C-f" . counsel-find-file)
              )
       :config
       (progn
         (ivy-mode 1)
         (setq ivy-use-virtual-buffers t)
         (setq enable-recursive-minibuffers t) ))
   #+END_SRC
* C++ editing
** Completion
   *NOTE* The following will make it so that you'll have to install ~cmake~ and
   ~cmake-devel~ (fedora) on your system, and run ~M-x irony-install-server~ for
   things to work.

   Use Irony-mode standalone:
   #+BEGIN_SRC emacs-lisp
     (use-package irony
       :ensure t
       :defer t
       :init
       (add-hook 'c++-mode-hook 'irony-mode)
       (add-hook 'c-mode-hook 'irony-mode)
       (add-hook 'objc-mode-hook 'irony-mode)
       :config
       ;; replace the `completion-at-point' and `complete-symbol' bindings in
       ;; irony-mode's buffers by irony-mode's function
       (defun my-irony-mode-hook ()
         (define-key irony-mode-map [remap completion-at-point]
           'irony-completion-at-point-async)
         (define-key irony-mode-map [remap complete-symbol]
           'irony-completion-at-point-async))
       (add-hook 'irony-mode-hook 'my-irony-mode-hook)
       (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
       )
   #+END_SRC

* General editing
** Auto-completion
*** Company

    Main completion engine. For C/C++ one needs to also install ~global~ outside
    emacs. In C/C++ project folder, one has to run the ~gtags~ command from time
    to time. This way, two completion engines are working in parallell.

    [[http://cachestocaches.com/2015/8/c-completion-emacs/][Read more here]]

    #+BEGIN_SRC emacs-lisp
      (use-package company
        :ensure t
        :defer t
        :init (add-hook 'after-init-hook 'global-company-mode)
        :config
        (use-package company-irony :ensure t :defer t)
        (setq company-idle-delay              nil
              company-minimum-prefix-length   2
              company-show-numbers            t
              company-tooltip-limit           20
              company-dabbrev-downcase        nil
              company-backends                '((company-irony company-gtags))
              )
        :bind ("C-;" . company-complete-common)
        )
    #+END_SRC

*** electric-pair-mode
    This auto-closes various brackets (not « and » currently)

    #+BEGIN_SRC emacs-lisp
      (electric-pair-mode 1)
    #+END_SRC

** Spell-and syntax checking
*** flycheck
    This package does on the fly syntax checking for MANY programming
    languages. It uses external tools like gcc for C/C++ and
    python-pylint for python.

    For python 3, do: pip3 install pylint, and it should work nicely.

    #+BEGIN_SRC emacs-lisp
      (use-package flycheck
        :ensure t
        :init
        (global-flycheck-mode t ))
    #+END_SRC

** No tabs!
   Don't use tabs for indentation:
   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
   #+END_SRC

   Set tab-width to 4:
   #+BEGIN_SRC emacs-lisp
     (setq tab-width 4)
   #+END_SRC

** Put backup files where they belong!
   Put the files in a separate folder
   #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist `(("." . "~/.saves")))
   #+END_SRC

   Back up by copying (may be slow)
   #+BEGIN_SRC emacs-lisp
     (setq backup-by-copying t)
   #+END_SRC

   Have a look at the Emacs documentation for these variables (with C-h v).
   #+BEGIN_SRC emacs-lisp
     (setq delete-old-versions t
       kept-new-versions 6
       kept-old-versions 2
       version-control t)
   #+END_SRC

   If I get tired of backups in the future, I can do:

   ~(setq make-backup-files nil)~

* Python editing
** Execution from within emacs
   This sets the version of python to use for the keybinding C-c C-c:
   #+BEGIN_SRC emacs-lisp
     (setq python-python-command "python3")
     (setq python-shell-interpreter "python3")
     (setq py-python-command "/usr/bin/python3")
   #+END_SRC

   The shell is opened with C-c C-z.

** Completion

   Make sure company-anaconda are installed:
    #+BEGIN_SRC emacs-lisp
      (use-package company-anaconda
        :ensure t)
    #+END_SRC

    ...and use the anaconda backend for python.
    #+BEGIN_SRC emacs-lisp
      (eval-after-load 'company
        '(add-to-list 'company-backends 'company-anaconda))
      (add-hook 'python-mode-hook 'anaconda-mode)
    #+END_SRC

    And eldoc-mode to get argument lists:
    #+BEGIN_SRC emacs-lisp
      (add-hook 'python-mode-hook 'anaconda-eldoc-mode)
    #+END_SRC

* Cosmetics
** Theme
   I'm still not fully sold on what theme to use, so the code for
   zenburn is still in here, though commented out. One can explore the
   different themes in the color-theme package through the load-theme
   M-x command.

   #+BEGIN_SRC emacs-lisp
     (use-package zenburn-theme
       :ensure t
       :config
       (load-theme 'zenburn t)
       )

;     (use-package color-theme
;       :ensure t
;       :config
;       (load-theme 'tango-plus t)
;       )

;     (load-theme 'tango-plus t)

   #+END_SRC

** Org-mode bullets
   Adds the nice bullets to org mode

   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
       )
   #+END_SRC

* Org-mode specifics
** Change org-mode python variable
   Sets Org-mode python command to python3.

   #+BEGIN_SRC emacs-lisp
     (setq org-babel-python-command "python3")
   #+END_SRC

** Saving links
   Keybinding needed for linking to points in other buffers.

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c l") 'org-store-link)
   #+END_SRC

* GIT integration
** Magit

   Make sure magit is installed:
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :ensure t)
   #+END_SRC

   This binds magit-status to C-x g
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x g") 'magit-status)
   #+END_SRC

   Command popup from non-magit buffers:
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x M-g") 'magit-dispatch-popup)
   #+END_SRC

