
#+STARTUP: overview
* Introduction
The following packages have to be installed from the command-line package manager:

- ~emacs-goodies-el~
- ~cmake~
- ~clang~
- ~clang-devel~ (fedora)
- ~latexmk~
- ~global~ (see [[*Company][this section]] for how it is  used with C++ completion)
- ~gcc~
- ~npm~
- ~ag~ *NOTE* on modern fedora one installs this with ~dnf install the_silver_searcher~
- ~pylint~ *NOTE* This should be installed with pip: ~pip3 install --user pylint~
- ~tern~ *NOTE* this should be installed through npm: ~sudo npm install -g tern~
- ~calendar-norway.el~ *NOTE* this needs some special attention, see [[*calendar-norway.el][this]] section, below.

** calendar-norway.el
Create the ~lisp~ directory in your ~.emacs.d~ directory, and in that directory clone [[https://github.com/unhammer/calendar-norway.el][this]] repository. The configuration itself is handled in the [[*Calendar weeks start with mondays, not sundays!][Calendar]] section below, under [[*Fix the interface][Fix the interface]].

* Fix the interface
** Removing startup message and cleaning top of window
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-screen t)
     (if (fboundp 'tool-bar-mode)
         (tool-bar-mode -1)
       )
     (if (fboundp 'menu-bar-mode)
         (menu-bar-mode -1)
       )
   #+END_SRC
** Tweaking general keybindings
   Only stuff related to the interface goes here, not tied up to
   specific modes or packages.

*** Shell integration

    Interactive shell command - may be limited
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "M-s") 'shell)
    #+END_SRC

    Spawn full bash in the buffer (no limitations):
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-M-s") 'term)
    #+END_SRC

*** 'y or n' prompts
    Don't ask for whole words, only the letter.

    #+BEGIN_SRC emacs-lisp
      (fset 'yes-or-no-p 'y-or-n-p)
    #+END_SRC

*** F5 'reload'
    Revert buffer on F5 (reloads buffer from file)

    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "<f5>") 'revert-buffer)
    #+END_SRC

** Line wrapping and highlighting
   Soft-wrapping of lines:

   #+BEGIN_SRC emacs-lisp
     (global-visual-line-mode 1)
   #+END_SRC

   Highlight current line:

   #+BEGIN_SRC emacs-lisp
     (global-hl-line-mode 1)
   #+END_SRC

   Set line-highlighting color to differ from the themes C-<space>
   color:

   #+BEGIN_SRC emacs-lisp
     (set-face-background hl-line-face "#d2dff6")
   #+END_SRC

** Vertical ruler
   Adds a marker at column 80 in programming buffers:
   #+BEGIN_SRC emacs-lisp
     (defun prog-mode-header-line ()
       "Setup the `header-line-format' on for buffers."
       (setq header-line-format
             (list " " (make-string 79 ?-) "|")))

     (add-hook 'prog-mode-hook #'prog-mode-header-line)
   #+END_SRC

   Highlight when past column 80.
   (*NOTE* For this you need to install the package 'emacs-goodies-el' from terminal)
   #+BEGIN_SRC emacs-lisp
     ;; (setq-default fill-column 80)
     ;; (add-hook 'prog-mode-hook 'highlight-beyond-fill-column)
     ;; (custom-set-faces '(highlight-beyond-fill-column-face
     ;;                     ((t (:foreground "red" )))))
   #+END_SRC

** Tweaking edges
   Removing fringes:
   #+BEGIN_SRC emacs-lisp
     (set-fringe-mode '(0 . 0))
   #+END_SRC

   Removing scrollbars:
   #+BEGIN_SRC emacs-lisp
     (if (fboundp 'scroll-bar-mode)
         (scroll-bar-mode -1)
       )
   #+END_SRC

** Feedback
   Tell when end of buffer is reached:
   #+BEGIN_SRC emacs-lisp
     (setq-default indicate-empty-lines t)
   #+END_SRC

   Whitespace awareness:
   #+BEGIN_SRC emacs-lisp
     (setq whitespace-style
           '(face trailing tabs indentation::space tab-mark)
           )
     (global-whitespace-mode)
;     (diminish 'global-whitespace-mode) ;; not exactly sure what this does..
   #+END_SRC

** Calendar weeks start with mondays, not sundays!
Add calendar package to load-path
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/lisp/calendar-norway.el")
#+END_SRC

Config rudely copy-pasted from the github readme:
#+BEGIN_SRC emacs-lisp
  ;; Localises date format, weekdays, months, lunar/solar names:
  (require 'calendar-norway)
  ;; Set what holidays you want in your calendar:
  (setq calendar-holidays
     (append
      ;; Include days where you don't have to work:
      calendar-norway-raude-dagar
      ;; Include other days that people celebrate:
      calendar-norway-andre-merkedagar
      ;; Include daylight savings time:
      calendar-norway-dst
      ;; And then you can add some non-Norwegian holidays etc. if you like:
      '((holiday-fixed 3 17 "St. Patricksdag")
        (holiday-fixed 10 31 "Hallowe'en")
        (holiday-float 11 4 4 "Thanksgiving")
        (solar-equinoxes-solstices))))
#+END_SRC

* Packages for trying new things
** Try
   #+BEGIN_SRC emacs-lisp
     (use-package try
       :ensure t)
   #+END_SRC

** Which-key
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure t
       :config
       (which-key-mode)
     )
   #+END_SRC

* Tweaking buffer and window management
** ibuffer
   This puts list of open buffers in a nicely navigatable list instead
   of the standard.

   #+BEGIN_SRC emacs-lisp
     (defalias 'list-buffers 'ibuffer)
   #+END_SRC

** ace-window
   Ace-window lets one switch more efficiently between different
   windows. The same C-x o binding is used.

   #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :ensure t
       :init
       (progn
        (global-set-key [remap other-window] 'ace-window)
        (custom-set-faces '(aw-leading-char-face
           ((t (:inherit ace-jump-face-foreground :height 3.0)))))
        ))
   #+END_SRC

* Better searching and file finding
** counsel
   I don't know too much about this package yet, but it is needed for
   swiper to work like I want.

   #+BEGIN_SRC emacs-lisp
     (use-package counsel
       :ensure t
       )
   #+END_SRC

** swiper
   Improves on the standard C-s search. You get a split-window, where
   you can navigate with C-n and C-p, as well as the possibility to
   use space-characters as wildcards. With this setting, it works the
   same way when finding files.

   It seems to also be able to interact with counsel to give some
   git-functionality as well, but I haven't researched this yet.

   #+BEGIN_SRC emacs-lisp
     (use-package swiper
       :ensure t
       :bind (("C-x C-f" . counsel-find-file)
              ("C-s" . swiper)
              ("C-c C-r" . ivy-resume)
              ("M-x" . counsel-M-x)
              ("C-x C-f" . counsel-find-file)
              )
       :config
       (progn
         (ivy-mode 1)
         (setq ivy-use-virtual-buffers t)
         (setq enable-recursive-minibuffers t) ))
   #+END_SRC

* General editing
** Auto-completion
*** Company

    Main completion engine. For C/C++ one needs to also install ~global~ outside
    emacs. In C/C++ project folder, one has to run the ~gtags~ command from time
    to time. This way, two completion engines are working in parallell.

    [[http://cachestocaches.com/2015/8/c-completion-emacs/][Read more here]]

    #+BEGIN_SRC emacs-lisp
      (use-package company
        :ensure t
        :defer t
        :init (add-hook 'after-init-hook 'global-company-mode)
        :config
        (use-package company-irony :ensure t :defer t)
        (setq company-idle-delay              nil
              company-minimum-prefix-length   2
              company-show-numbers            t
              company-tooltip-limit           20
              company-dabbrev-downcase        nil
              company-backends                '((company-irony company-gtags))
              )
        :bind ("C-;" . company-complete-common)
        )
    #+END_SRC

*** electric-pair-mode
    This auto-closes various brackets (not « and » currently)

    #+BEGIN_SRC emacs-lisp
      (electric-pair-mode 1)
    #+END_SRC

** Spell-and syntax checking
*** flycheck
    This package does on the fly syntax checking for MANY programming
    languages. It uses external tools like gcc for C/C++ and
    python-pylint for python.

    For python 3, do: pip3 install pylint, and it should work nicely.

    #+BEGIN_SRC emacs-lisp
      (use-package flycheck
        :ensure t
        :init
        (global-flycheck-mode t ))
    #+END_SRC

** No tabs!
   Don't use tabs for indentation:
   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
   #+END_SRC

   Set tab-width to 4:
   #+BEGIN_SRC emacs-lisp
     (setq tab-width 4)
   #+END_SRC

** Put backup files where they belong!
   Put the files in a separate folder
   #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist `(("." . "~/.saves")))
   #+END_SRC

   Back up by copying (may be slow)
   #+BEGIN_SRC emacs-lisp
     (setq backup-by-copying t)
   #+END_SRC

   Have a look at the Emacs documentation for these variables (with C-h v).
   #+BEGIN_SRC emacs-lisp
     (setq delete-old-versions t
       kept-new-versions 6
       kept-old-versions 2
       version-control t)
   #+END_SRC

   If I get tired of backups in the future, I can do:

   ~(setq make-backup-files nil)~

** Helm stuff
Helm can be used instead of swiper, I think, and some of the other navigation-simplifiers I use elsewhere in this config. But I'll use it only for bookmarks, and latex-editing with org-ref; for now.
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :config
    ;(require 'helm-config)
    (global-set-key (kbd "C-x r b") 'helm-bookmarks))
#+END_SRC

** Multi-cursor bindings
#+BEGIN_SRC emacs-lisp
  (define-key ctl-x-map (kbd "C-SPC")
    #'set-rectangular-region-anchor)

  (define-key ctl-x-map (kbd "C-m")
    #'mc/mark-all-dwim)

  (global-set-key (kbd "M-3") #'mc/mark-next-like-this)
  (global-set-key (kbd "M-4") #'mc/mark-previous-like-this)

  (global-set-key (kbd "M-#") #'mc/unmark-next-like-this)
  (global-set-key (kbd "M-¤") #'mc/unmark-previous-like-this)

#+END_SRC
* C++ editing
** Completion
   *NOTE* The following will make it so that you'll have to install ~cmake~ and
   ~cmake-devel~ (fedora) on your system, and run ~M-x irony-install-server~ for
   things to work.

   Use Irony-mode standalone:
   #+BEGIN_SRC emacs-lisp
     (use-package irony
       :ensure t
       :defer t
       :init
       (add-hook 'c++-mode-hook 'irony-mode)
       (add-hook 'c-mode-hook 'irony-mode)
       (add-hook 'objc-mode-hook 'irony-mode)
       :config
       ;; replace the `completion-at-point' and `complete-symbol' bindings in
       ;; irony-mode's buffers by irony-mode's function
       (defun my-irony-mode-hook ()
         (define-key irony-mode-map [remap completion-at-point]
           'irony-completion-at-point-async)
         (define-key irony-mode-map [remap complete-symbol]
           'irony-completion-at-point-async))
       (add-hook 'irony-mode-hook 'my-irony-mode-hook)
       (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
       )
   #+END_SRC

** Indentation
   Defining custom mode-hook to make indentation be 4 spaces wide, and keep
   curly braces at relative level 0.
   #+BEGIN_SRC emacs-lisp :results silent
     (defun morngrar-c-mode-hook ()
       (setq c-basic-offset 4)                   ; Set C standard offset to 4 spaces
       (c-set-offset 'defun-block-intro '+)     ; normal functions indentation
       (c-set-offset 'substatement-open '0)      ; nested for-loop curly brackets
       (c-set-offset 'statement-block-intro '+) ; for-loop indentation
       (c-set-offset 'statement-case-intro '+)  ; switch-case indentation to 4

       (c-set-offset 'arglist-intro '+)         ; for splitting argument lists over
       (c-set-offset 'arglist-close '0)          ; several lines

       (c-set-offset 'substatement '+)          ; Bracketless if-statements
       (c-set-offset 'statement-cont '+)        ; Same

       (c-set-offset 'brace-list-intro '+)      ; list instantiation
       )
   #+END_SRC

   Adding hook to C-like languages:
   #+BEGIN_SRC emacs-lisp
     (add-hook 'c-mode-common-hook 'morngrar-c-mode-hook)
   #+END_SRC

   If this needs to be changed in the future to be different for different
   languages; one can add separate hooks to them like ~c-mode-hook~ for C files,
   ~c++-mode-hook~ for C++ files, ~java-mode-hook~ for java files, etc.
   
** Project navigation
   Making sure projectile is installed
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :ensure t)
   #+END_SRC

   Adding c-mode hook
   #+BEGIN_SRC emacs-lisp
     (add-hook 'c-mode-common-hook 'projectile-mode)
   #+END_SRC

* Rust editing
Legger inn rust-mode på .rs filer

#+BEGIN_SRC emacs-lisp :results silent
  (use-package rust-mode
    :ensure t)

  (add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode))
#+END_SRC
* PHP editing
#+BEGIN_SRC emacs-lisp
  (use-package php-mode
    :ensure t
    )
#+END_SRC
* Go editing
Making sure go-mode is installed:
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :ensure t
    )
#+END_SRC

FIXING TABS AND INDENTING!
#+BEGIN_SRC emacs-lisp
  (defun fix-go-mode-tabs ()
    (setq indent-tabs-mode nil)
    (setq tab-width 4))

  (add-hook 'go-mode-hook 'fix-go-mode-tabs)
#+END_SRC

* Python editing
** Execution from within emacs
   This sets the version of python to use for the keybinding C-c C-c:
   #+BEGIN_SRC emacs-lisp
     (setq python-python-command "python3")
     (setq python-shell-interpreter "python3")
     (setq py-python-command "/usr/bin/python3")
   #+END_SRC

   The shell is opened with C-c C-z.

** Completion
   Make sure company-anaconda are installed:
    #+BEGIN_SRC emacs-lisp
      (use-package company-anaconda
        :ensure t)
    #+END_SRC

    ...and use the anaconda backend for python.
    #+BEGIN_SRC emacs-lisp
      (eval-after-load 'company
        '(add-to-list 'company-backends 'company-anaconda))
      (add-hook 'python-mode-hook 'anaconda-mode)
    #+END_SRC

    And eldoc-mode to get argument lists:
    #+BEGIN_SRC emacs-lisp
      (add-hook 'python-mode-hook 'anaconda-eldoc-mode)
    #+END_SRC

** Project navigation
   Adding hook to projectile-mode (installed under c++ navigation)
   #+BEGIN_SRC emacs-lisp
     (add-hook 'python-mode-hook 'projectile-mode)
   #+END_SRC

* Ledger-cli editing
** Enabling ledger-mode
#+BEGIN_SRC emacs-lisp
  (use-package ledger-mode
    :ensure t
    :init
    (setq ledger-clear-whole-transactions 1)

    :mode "\\.ldg\\'")
#+END_SRC

** Completion
#+BEGIN_SRC emacs-lisp
  (add-hook 'ledger-mode-hook
            (lambda ()
              (setq-local tab-always-indent 'complete)
              (setq-local completion-cycle-threshold t)
              (setq-local ledger-complete-in-steps t)))
#+END_SRC
** Calculator
#+BEGIN_SRC emacs-lisp
  (setq calc-point-char ",")
#+END_SRC
* JavaScript editing
** Enhanced editing mode
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t)

  ; Use the new mode automatically in .js buffers
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
#+END_SRC
** Refactoring and cross-referencing

A package with refactoring tools:
#+BEGIN_SRC emacs-lisp
  (use-package js2-refactor
    :ensure t)
  (add-hook 'js2-mode-hook #'js2-reafactor-mode)

  (js2r-add-keybindings-with-prefix "C-c C-r")
  (define-key js2-mode-map (kbd "C-k") #'js2r-kill)
#+END_SRC

A package for cross-referencing:
#+BEGIN_SRC emacs-lisp
  (use-package xref-js2
    :ensure t)

  ; js-mode binds a binding that conflicts with xref-js2
  (define-key js-mode-map (kbd "M-.") nil)

  (add-hook 'js2-mode-hook (lambda ()
     (add-hook 'xref-backend-functions #'xref-js2-backend nil t)))

#+END_SRC

*NOTE* this thing uses [[https://github.com/ggreer/the_silver_searcher][ag]] as a backend, so this must be installed on the system. On modern fedora, this is done with ~dnf install the_silver_searcher~ (yeah, pretty intuitive...)

** Completion
*NOTE* For the following configuration to work, one has to manually install ~npm~ and do ~sudo npm install -g tern~ first. 

Company-backend:
#+BEGIN_SRC emacs-lisp
  (use-package company-tern
    :ensure t)
  (add-to-list 'company-backends 'company-tern)
  (add-hook 'js2-mode-hook 'tern-mode)
#+END_SRC

Disable completion keybindings, since xref-js2 handles this:
#+BEGIN_SRC emacs-lisp
  (define-key tern-mode-keymap (kbd "M-.") nil)
  (define-key tern-mode-keymap (kbd "M-,") nil)
#+END_SRC

*NOTE* tern might have to be set up to work with our project structure, for info on how to do this see [[https://emacs.cafe/emacs/javascript/setup/2017/05/09/emacs-setup-javascript-2.html][this blog post (my source for this config)]].

* Cosmetics
** Theme
   I'm still not fully sold on what theme to use, so the code for
   zenburn is still in here, though commented out. One can explore the
   different themes in the color-theme package through the load-theme
   M-x command.

   #+BEGIN_SRC emacs-lisp
     (use-package zenburn-theme
       :ensure t
       :config
       (load-theme 'zenburn t)
       )

;     (use-package color-theme
;       :ensure t
;       :config
;       (load-theme 'tango-plus t)
;       )

;     (load-theme 'tango-plus t)

   #+END_SRC

** Org-mode bullets
   Adds the nice bullets to org mode

   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
       )
   #+END_SRC

* Org-mode specifics
** Change org-mode python variable
   Sets Org-mode python command to python3.

   #+BEGIN_SRC emacs-lisp
     (setq org-babel-python-command "python3")
   #+END_SRC

** Saving links
   Keybinding needed for linking to points in other buffers.

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c l") 'org-store-link)
   #+END_SRC

** Latex exporting
A custom class for exporting norwegian latex documents.
#+BEGIN_SRC emacs-lisp :results silent
  ;; Don't really know what this accomplishes, but..
  (unless (boundp 'org-latex-classes)
    (setq org-latex-classes nil))
  (setq org-latex-toc-command "\\tableofcontents \\clearpage")
  (add-to-list 'org-latex-classes
  '("oppgave"

  "\\documentclass[11pt,a4paper,norsk]{article}
  \\usepackage[norsk]{babel}
  \\usepackage[a4paper]{geometry}
  \\usepackage{marginnote}
  \\usepackage[T1]{fontenc}
  \\usepackage{libertine}

  \\usepackage[utf8]{inputenc}
  \\usepackage{datetime}
  \\usepackage{color,hyperref}
  \\usepackage{fancyhdr}

  \\usepackage{graphicx}
  \\usepackage{mathtools}
  \\usepackage{braket} % for sets and like in equations. Defines \\set{}
  \\usepackage{amsmath}
  \\usepackage{amssymb}
  \\usepackage{amsfonts}
  \\usepackage{booktabs}
  \\usepackage{tabls}

  \\frenchspacing

  \\def\\doubleunderline#1{\\underline{\\underline{#1}}}
  \\def\\uline#1{\\underline{#1}}
  \\def\\duline#1{\\uline{\\uline{#1}}}

  \\newcommand*{\\Z}{\\mathbb{Z}}
  \\newcommand*{\\R}{\\mathbb{R}}
  \\newcommand*{\\N}{\\mathbb{N}}
  \\newcommand*{\\Q}{\\mathbb{Q}}

  [NO-DEFAULT-PACKAGES]
  [PACKAGES]
  [EXTRA]"

  ("\\section{%s}" . "\\section*{%s}")
  ("\\subsection{%s}" . "\\subsection*{%s}")
  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  ("\\paragraph{%s}" . "\\paragraph*{%s}")
  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")

  ))
#+END_SRC

Handling latex small caps or other arbitrary markup, using links:
#+BEGIN_SRC emacs-lisp
  (org-add-link-type
   "latex" nil
   (lambda (path desc format)
     (cond
      ((eq format 'html)
       (format "<span class=\"%s\">%s</span>" path desc))
      ((eq format 'latex)
       (format "\\%s{%s}" path desc)))))
#+END_SRC

*** Bibliographies and citations
Installing and configuring org-ref
#+BEGIN_SRC emacs-lisp
  (use-package org-ref
    :ensure t)
  (use-package helm-bibtex
    :ensure t)

  (setq reftex-default-bibliography
        '("~/Dropbox/Skole/Programmering/bibliografi/references.bib"))
  (setq org-ref-bibliography-notes
        "~/Dropbox/Skole/Programmering/bibliografi/notes.org"
        org-ref-default-bibliography
        '("~/Dropbox/Skole/Programmering/bibliografi/references.bib")
        org-ref-pdf-directory
        "~/Dropbox/Skole/Programmering/bibliografi/bibtex-pdfs/")
  (setq bibtex-completion-bibliography
        "~/Dropbox/Skole/Programmering/bibliografi/references.bib"
        bibtex-completion-library-path
        "~/Dropbox/Skole/Programmering/bibliografi/bibtex-pdfs"
        bibtex-completion-notes-path
        "~/Dropbox/Skole/Programmering/bibliografi/helm-bibtex-notes")
  (setq bibtex-completion-pdf-open-function 'org-open-file)
#+END_SRC

Make sure that the latex export includes a bibliography. *NOTE: this command uses bibtex, if you need biblatex it has to be changed! Also, ~latexmk~ has to be installed with the system package manager.*

Se [[https://mg.readthedocs.io/latexmk.html][the docs for latexmk]] for more info.
#+BEGIN_SRC emacs-lisp
  (setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))
#+END_SRC

** Agenda system
Add a closed timestamp to finished todo-items
#+BEGIN_SRC emacs-lisp
  (setq org-log-done 'time)
#+END_SRC

Files to be included in the agenda
#+BEGIN_SRC emacs-lisp
  ;(setq org-agenda-files (list "~/org/todo.org"
  ;                             "~/org/jobb.org"
  ;                             "~/org/personlig.org"
  ;                             "~/org/skole.org"
  ;                             ))
  (setq org-agenda-files '("~/org")) ;includes all files in directory
#+END_SRC

Refiling to agenda files
#+BEGIN_SRC emacs-lisp
  (setq org-refile-use-outline-path 'file)

  ;; refile as toplevel
  (setq org-refile-targets '((org-agenda-files :level . 1)))
#+END_SRC

Custom agenda command for all unscheduled todo items
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-custom-commands
        '(("c" . "My Custom Agendas")
          ("cu" "Unscheduled TODO"
           ((todo ""
                  ((org-agenda-overriding-header "\nUnscheduled TODO")
                   (org-agenda-skip-function
                    '(org-agenda-skip-entry-if 'scheduled)
                    )
                   )
                  ))
           nil
           nil
           )
          )
        )

#+END_SRC

** Bindings
Undefined "standard" bindings bound to same or new bindings
#+BEGIN_SRC emacs-lisp :results silent
  ;; inactive timestamps (won't show up in agenda)
  (define-key org-mode-map (kbd "C-.")
    #'org-time-stamp-inactive)
  ;(define-key org-mode-map (kbd "C-u C-.")
  ;  #'org-time-stamp-rounding-minutes-inactive)
#+END_SRC

*** Bindings pertaining to the agenda view
  Capturing tasks globally
  #+BEGIN_SRC emacs-lisp
    (setq org-default-notes-file (concat org-directory "/todo.org"))
    (define-key global-map (kbd "C-c c") 'org-capture)
  #+END_SRC

  Show agendas
  #+BEGIN_SRC emacs-lisp
    (define-key global-map (kbd "C-c a") 'org-agenda)
  #+END_SRC

*** Definition of bindings for org-ref
#+BEGIN_SRC emacs-lisp
  (define-key org-mode-map (kbd "<pause>")
    #'org-ref-insert-ref-link)
#+END_SRC

* GIT integration
** Magit

   Make sure magit is installed:
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :ensure t)
   #+END_SRC

   This binds magit-status to C-x g
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x g") 'magit-status)
   #+END_SRC

   Command popup from non-magit buffers:
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x M-g") 'magit-dispatch-popup)
   #+END_SRC

* Setting initial frame size
  This has to go last, since some of the settings above seems to change this..

  #+BEGIN_SRC emacs-lisp
    (set-frame-size (selected-frame) 81 40)
  #+END_SRC
